class Item:
    def __init__(self, item_id, name, description, price):
        if not name.strip():
            raise ValueError("Name cannot be empty.")
        if price < 0:
            raise ValueError("Price cannot be negative.")
        
        self.id = item_id
        self.name = name
        self.description = description
        self.price = price

    def __str__(self):
        return f"ID: {self.id}, Name: {self.name}, Description: {self.description}, Price: ${self.price:.2f}"


class ItemManager:
    def __init__(self):
        self.items = []
        self.next_id = 1

    def create_item(self, name, description, price):
        try:
            item = Item(self.next_id, name, description, price)
            self.items.append(item)
            self.next_id += 1
            print("Item added successfully.")
        except ValueError as e:
            print(f"Error: {e}")

    def read_items(self):
        if not self.items:
            print("No items available.")
        else:
            for item in self.items:
                print(item)

    def update_item(self, item_id, new_name, new_description, new_price):
        for item in self.items:
            if item.id == item_id:
                try:
                    if not new_name.strip():
                        raise ValueError("Name cannot be empty.")
                    if new_price < 0:
                        raise ValueError("Price cannot be negative.")
                    
                    item.name = new_name
                    item.description = new_description
                    item.price = new_price
                    print("Item updated successfully.")
                    return
                except ValueError as e:
                    print(f"Error: {e}")
                    return
        print("Item not found.")

    def delete_item(self, item_id):
        for item in self.items:
            if item.id == item_id:
                self.items.remove(item)
                print("Item deleted successfully.")
                return
        print("Item not found.")



def main():
    manager = ItemManager()

    while True:
        print("\n1. Add Item\n2. View Items\n3. Update Item\n4. Delete Item\n5. Exit")
        choice = input("Enter choice: ")

        if choice == "1":
            name = input("Enter name: ")
            description = input("Enter description: ")
            try:
                price = float(input("Enter price: "))
                manager.create_item(name, description, price)
            except ValueError:
                print("Invalid price. Please enter a numeric value.")

        elif choice == "2":
            manager.read_items()

        elif choice == "3":
            try:
                item_id = int(input("Enter item ID to update: "))
                new_name = input("Enter new name: ")
                new_description = input("Enter new description: ")
                new_price = float(input("Enter new price: "))
                manager.update_item(item_id, new_name, new_description, new_price)
            except ValueError:
                print("Invalid input. Please enter a valid number for ID and price.")

        elif choice == "4":
            try:
                item_id = int(input("Enter item ID to delete: "))
                manager.delete_item(item_id)
            except ValueError:
                print("Invalid input. Please enter a valid number.")

        elif choice == "5":
            print("Exiting program.")
            break

        else:
            print("Invalid choice. Please try again.")


if __name__ == "__main__":
    main()
